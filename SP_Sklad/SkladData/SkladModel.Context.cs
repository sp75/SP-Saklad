//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SP_Sklad.SkladData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BaseEntities : DbContext
    {
        public BaseEntities()
            : base("name=BaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ACCOUNTTYPE> ACCOUNTTYPE { get; set; }
        public DbSet<BANKS> BANKS { get; set; }
        public DbSet<BANKSPERSONS> BANKSPERSONS { get; set; }
        public DbSet<BLOBS> BLOBS { get; set; }
        public DbSet<CITYTYPE> CITYTYPE { get; set; }
        public DbSet<COMMISSION> COMMISSION { get; set; }
        public DbSet<COMMONPARAMS> COMMONPARAMS { get; set; }
        public DbSet<CONTRACTS> CONTRACTS { get; set; }
        public DbSet<CONTRDET> CONTRDET { get; set; }
        public DbSet<CONTRPARAMS> CONTRPARAMS { get; set; }
        public DbSet<CONTRRESULTS> CONTRRESULTS { get; set; }
        public DbSet<COUNTRIES> COUNTRIES { get; set; }
        public DbSet<CURRENCY> CURRENCY { get; set; }
        public DbSet<CURRENCYRATE> CURRENCYRATE { get; set; }
        public DbSet<DEBONINGDET> DEBONINGDET { get; set; }
        public DbSet<DISCCARDGRP> DISCCARDGRP { get; set; }
        public DbSet<DISCCARDS> DISCCARDS { get; set; }
        public DbSet<DOCS> DOCS { get; set; }
        public DbSet<DOCTYP> DOCTYP { get; set; }
        public DbSet<ENTPARAMS> ENTPARAMS { get; set; }
        public DbSet<FUNCTIONS> FUNCTIONS { get; set; }
        public DbSet<KAADDR> KAADDR { get; set; }
        public DbSet<KADISCOUNT> KADISCOUNT { get; set; }
        public DbSet<KAGENTACCOUNT> KAGENTACCOUNT { get; set; }
        public DbSet<KAGENTDOC> KAGENTDOC { get; set; }
        public DbSet<KAGENTPERSONS> KAGENTPERSONS { get; set; }
        public DbSet<KAGENTSALDO> KAGENTSALDO { get; set; }
        public DbSet<KAGENTTYP> KAGENTTYP { get; set; }
        public DbSet<KAKIND> KAKIND { get; set; }
        public DbSet<KAMATDISCOUNT> KAMATDISCOUNT { get; set; }
        public DbSet<KAMATGROUPDISCOUNT> KAMATGROUPDISCOUNT { get; set; }
        public DbSet<LANGUAGES> LANGUAGES { get; set; }
        public DbSet<MATCHANGE> MATCHANGE { get; set; }
        public DbSet<MATERIALS> MATERIALS { get; set; }
        public DbSet<MATGROUP> MATGROUP { get; set; }
        public DbSet<MATGROUPPRICES> MATGROUPPRICES { get; set; }
        public DbSet<MATPRICES> MATPRICES { get; set; }
        public DbSet<MATRECDET> MATRECDET { get; set; }
        public DbSet<MATRECIPE> MATRECIPE { get; set; }
        public DbSet<MATREMAINS> MATREMAINS { get; set; }
        public DbSet<MEASURES> MEASURES { get; set; }
        public DbSet<MONEYSALDO> MONEYSALDO { get; set; }
        public DbSet<OPERLOG> OPERLOG { get; set; }
        public DbSet<PAYDOCTYPE> PAYDOCTYPE { get; set; }
        public DbSet<POSREMAINS> POSREMAINS { get; set; }
        public DbSet<PRICELIST> PRICELIST { get; set; }
        public DbSet<PRICELISTDET> PRICELISTDET { get; set; }
        public DbSet<PRICETYPES> PRICETYPES { get; set; }
        public DbSet<PRINTLOG> PRINTLOG { get; set; }
        public DbSet<REPLNG> REPLNG { get; set; }
        public DbSet<REPORTS> REPORTS { get; set; }
        public DbSet<RETURNREL> RETURNREL { get; set; }
        public DbSet<SERIALS> SERIALS { get; set; }
        public DbSet<SERVICES> SERVICES { get; set; }
        public DbSet<SVCGROUP> SVCGROUP { get; set; }
        public DbSet<TABLES> TABLES { get; set; }
        public DbSet<TAXES> TAXES { get; set; }
        public DbSet<TAXWB> TAXWB { get; set; }
        public DbSet<TAXWBDET> TAXWBDET { get; set; }
        public DbSet<TECHPROCDET> TECHPROCDET { get; set; }
        public DbSet<TECHPROCESS> TECHPROCESS { get; set; }
        public DbSet<USERTREE> USERTREE { get; set; }
        public DbSet<USERTREEVIEW> USERTREEVIEW { get; set; }
        public DbSet<VIEWLNG> VIEWLNG { get; set; }
        public DbSet<WAREHOUSE> WAREHOUSE { get; set; }
        public DbSet<WAYBILLDETADDPROPS> WAYBILLDETADDPROPS { get; set; }
        public DbSet<WAYBILLDETTAXES> WAYBILLDETTAXES { get; set; }
        public DbSet<WAYBILLMAKE> WAYBILLMAKE { get; set; }
        public DbSet<WAYBILLMOVE> WAYBILLMOVE { get; set; }
        public DbSet<WAYBILLSVC> WAYBILLSVC { get; set; }
        public DbSet<USER_TREE_ACCESS> USER_TREE_ACCESS { get; set; }
        public DbSet<USERACCESS> USERACCESS { get; set; }
        public DbSet<USERACCESSWH> USERACCESSWH { get; set; }
        public DbSet<WaybillList> WaybillList { get; set; }
        public DbSet<WaybillDet> WaybillDet { get; set; }
        public DbSet<MaterialsList> MaterialsList { get; set; }
        public DbSet<Actives> Actives { get; set; }
        public DbSet<WMatTurn> WMatTurn { get; set; }
        public DbSet<v_GetDocsTree> v_GetDocsTree { get; set; }
        public DbSet<CashDesks> CashDesks { get; set; }
        public DbSet<PayType> PayType { get; set; }
        public DbSet<Kagent> Kagent { get; set; }
        public DbSet<DocsRel> DocsRel { get; set; }
        public DbSet<PayDoc> PayDoc { get; set; }
        public DbSet<ChargeType> ChargeType { get; set; }
        public DbSet<Users> Users { get; set; }
        public DbSet<KagentList> KagentList { get; set; }
    
        [EdmFunction("BaseEntities", "GetMatGroupTree")]
        public virtual IQueryable<GetMatGroupTree_Result> GetMatGroupTree(Nullable<int> root_cat_id)
        {
            var root_cat_idParameter = root_cat_id.HasValue ?
                new ObjectParameter("root_cat_id", root_cat_id) :
                new ObjectParameter("root_cat_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMatGroupTree_Result>("[BaseEntities].[GetMatGroupTree](@root_cat_id)", root_cat_idParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_AUTO_RSV_WB")]
        public virtual IQueryable<SP_AUTO_RSV_WB_Result> SP_AUTO_RSV_WB(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_AUTO_RSV_WB_Result>("[BaseEntities].[SP_AUTO_RSV_WB](@WBILLID)", wBILLIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_AUTO_RSV_WB_2")]
        public virtual IQueryable<SP_AUTO_RSV_WB_2_Result> SP_AUTO_RSV_WB_2(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_AUTO_RSV_WB_2_Result>("[BaseEntities].[SP_AUTO_RSV_WB_2](@WBILLID)", wBILLIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_CONTRACTS_LIST")]
        public virtual IQueryable<SP_CONTRACTS_LIST_Result> SP_CONTRACTS_LIST(Nullable<int> iN_DOCTYPE, Nullable<System.DateTime> iN_FROMDATE, Nullable<System.DateTime> iN_TODATE, Nullable<int> iN_KAID, Nullable<int> iN_CHECKED)
        {
            var iN_DOCTYPEParameter = iN_DOCTYPE.HasValue ?
                new ObjectParameter("IN_DOCTYPE", iN_DOCTYPE) :
                new ObjectParameter("IN_DOCTYPE", typeof(int));
    
            var iN_FROMDATEParameter = iN_FROMDATE.HasValue ?
                new ObjectParameter("IN_FROMDATE", iN_FROMDATE) :
                new ObjectParameter("IN_FROMDATE", typeof(System.DateTime));
    
            var iN_TODATEParameter = iN_TODATE.HasValue ?
                new ObjectParameter("IN_TODATE", iN_TODATE) :
                new ObjectParameter("IN_TODATE", typeof(System.DateTime));
    
            var iN_KAIDParameter = iN_KAID.HasValue ?
                new ObjectParameter("IN_KAID", iN_KAID) :
                new ObjectParameter("IN_KAID", typeof(int));
    
            var iN_CHECKEDParameter = iN_CHECKED.HasValue ?
                new ObjectParameter("IN_CHECKED", iN_CHECKED) :
                new ObjectParameter("IN_CHECKED", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_CONTRACTS_LIST_Result>("[BaseEntities].[SP_CONTRACTS_LIST](@IN_DOCTYPE, @IN_FROMDATE, @IN_TODATE, @IN_KAID, @IN_CHECKED)", iN_DOCTYPEParameter, iN_FROMDATEParameter, iN_TODATEParameter, iN_KAIDParameter, iN_CHECKEDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_AVG_PRICE")]
        public virtual IQueryable<SP_GET_AVG_PRICE_Result> SP_GET_AVG_PRICE(Nullable<int> iN_POSID)
        {
            var iN_POSIDParameter = iN_POSID.HasValue ?
                new ObjectParameter("IN_POSID", iN_POSID) :
                new ObjectParameter("IN_POSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_AVG_PRICE_Result>("[BaseEntities].[SP_GET_AVG_PRICE](@IN_POSID)", iN_POSIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_DOC_LIST")]
        public virtual IQueryable<SP_GET_DOC_LIST_Result> SP_GET_DOC_LIST(Nullable<System.DateTime> iN_FROMDATE, Nullable<System.DateTime> iN_TODATE, Nullable<int> iN_KAID, Nullable<int> iN_WTYPE)
        {
            var iN_FROMDATEParameter = iN_FROMDATE.HasValue ?
                new ObjectParameter("IN_FROMDATE", iN_FROMDATE) :
                new ObjectParameter("IN_FROMDATE", typeof(System.DateTime));
    
            var iN_TODATEParameter = iN_TODATE.HasValue ?
                new ObjectParameter("IN_TODATE", iN_TODATE) :
                new ObjectParameter("IN_TODATE", typeof(System.DateTime));
    
            var iN_KAIDParameter = iN_KAID.HasValue ?
                new ObjectParameter("IN_KAID", iN_KAID) :
                new ObjectParameter("IN_KAID", typeof(int));
    
            var iN_WTYPEParameter = iN_WTYPE.HasValue ?
                new ObjectParameter("IN_WTYPE", iN_WTYPE) :
                new ObjectParameter("IN_WTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_DOC_LIST_Result>("[BaseEntities].[SP_GET_DOC_LIST](@IN_FROMDATE, @IN_TODATE, @IN_KAID, @IN_WTYPE)", iN_FROMDATEParameter, iN_TODATEParameter, iN_KAIDParameter, iN_WTYPEParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_MAKE_AMOUNT")]
        public virtual IQueryable<SP_GET_MAKE_AMOUNT_Result> SP_GET_MAKE_AMOUNT(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_MAKE_AMOUNT_Result>("[BaseEntities].[SP_GET_MAKE_AMOUNT](@WBILLID)", wBILLIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_MAT_EXTRA")]
        public virtual IQueryable<SP_GET_MAT_EXTRA_Result> SP_GET_MAT_EXTRA(Nullable<int> mATID, Nullable<int> pTYPEID, Nullable<System.DateTime> oNDATE, Nullable<decimal> pRICE, Nullable<int> iN_CURRID, Nullable<decimal> oNVALUE)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var pTYPEIDParameter = pTYPEID.HasValue ?
                new ObjectParameter("PTYPEID", pTYPEID) :
                new ObjectParameter("PTYPEID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var iN_CURRIDParameter = iN_CURRID.HasValue ?
                new ObjectParameter("IN_CURRID", iN_CURRID) :
                new ObjectParameter("IN_CURRID", typeof(int));
    
            var oNVALUEParameter = oNVALUE.HasValue ?
                new ObjectParameter("ONVALUE", oNVALUE) :
                new ObjectParameter("ONVALUE", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_MAT_EXTRA_Result>("[BaseEntities].[SP_GET_MAT_EXTRA](@MATID, @PTYPEID, @ONDATE, @PRICE, @IN_CURRID, @ONVALUE)", mATIDParameter, pTYPEIDParameter, oNDATEParameter, pRICEParameter, iN_CURRIDParameter, oNVALUEParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_MAT_RSV")]
        public virtual IQueryable<SP_GET_MAT_RSV_Result> SP_GET_MAT_RSV(Nullable<int> iN_MATID, Nullable<int> iN_KAID, Nullable<System.DateTime> iN_FROMDATE, Nullable<System.DateTime> iN_TODATE, Nullable<int> iN_WTYPE)
        {
            var iN_MATIDParameter = iN_MATID.HasValue ?
                new ObjectParameter("IN_MATID", iN_MATID) :
                new ObjectParameter("IN_MATID", typeof(int));
    
            var iN_KAIDParameter = iN_KAID.HasValue ?
                new ObjectParameter("IN_KAID", iN_KAID) :
                new ObjectParameter("IN_KAID", typeof(int));
    
            var iN_FROMDATEParameter = iN_FROMDATE.HasValue ?
                new ObjectParameter("IN_FROMDATE", iN_FROMDATE) :
                new ObjectParameter("IN_FROMDATE", typeof(System.DateTime));
    
            var iN_TODATEParameter = iN_TODATE.HasValue ?
                new ObjectParameter("IN_TODATE", iN_TODATE) :
                new ObjectParameter("IN_TODATE", typeof(System.DateTime));
    
            var iN_WTYPEParameter = iN_WTYPE.HasValue ?
                new ObjectParameter("IN_WTYPE", iN_WTYPE) :
                new ObjectParameter("IN_WTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_MAT_RSV_Result>("[BaseEntities].[SP_GET_MAT_RSV](@IN_MATID, @IN_KAID, @IN_FROMDATE, @IN_TODATE, @IN_WTYPE)", iN_MATIDParameter, iN_KAIDParameter, iN_FROMDATEParameter, iN_TODATEParameter, iN_WTYPEParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_MATGRP_NDS")]
        public virtual IQueryable<SP_GET_MATGRP_NDS_Result> SP_GET_MATGRP_NDS(Nullable<int> gRPID)
        {
            var gRPIDParameter = gRPID.HasValue ?
                new ObjectParameter("GRPID", gRPID) :
                new ObjectParameter("GRPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_MATGRP_NDS_Result>("[BaseEntities].[SP_GET_MATGRP_NDS](@GRPID)", gRPIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_RELDOCIDS")]
        public virtual IQueryable<SP_GET_RELDOCIDS_Result> SP_GET_RELDOCIDS(Nullable<int> aDOCID)
        {
            var aDOCIDParameter = aDOCID.HasValue ?
                new ObjectParameter("ADOCID", aDOCID) :
                new ObjectParameter("ADOCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_RELDOCIDS_Result>("[BaseEntities].[SP_GET_RELDOCIDS](@ADOCID)", aDOCIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_MATCHANGE_GET_WP")]
        public virtual IQueryable<SP_MATCHANGE_GET_WP_Result> SP_MATCHANGE_GET_WP(Nullable<int> mATID, Nullable<System.DateTime> mCDATE)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var mCDATEParameter = mCDATE.HasValue ?
                new ObjectParameter("MCDATE", mCDATE) :
                new ObjectParameter("MCDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_MATCHANGE_GET_WP_Result>("[BaseEntities].[SP_MATCHANGE_GET_WP](@MATID, @MCDATE)", mATIDParameter, mCDATEParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_POS_GET")]
        public virtual IQueryable<SP_POS_GET_Result> SP_POS_GET(Nullable<int> mATID, Nullable<int> w_ID, Nullable<int> kAID, Nullable<System.DateTime> oN_DATE, Nullable<int> gETEMPTY, string wH)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var w_IDParameter = w_ID.HasValue ?
                new ObjectParameter("W_ID", w_ID) :
                new ObjectParameter("W_ID", typeof(int));
    
            var kAIDParameter = kAID.HasValue ?
                new ObjectParameter("KAID", kAID) :
                new ObjectParameter("KAID", typeof(int));
    
            var oN_DATEParameter = oN_DATE.HasValue ?
                new ObjectParameter("ON_DATE", oN_DATE) :
                new ObjectParameter("ON_DATE", typeof(System.DateTime));
    
            var gETEMPTYParameter = gETEMPTY.HasValue ?
                new ObjectParameter("GETEMPTY", gETEMPTY) :
                new ObjectParameter("GETEMPTY", typeof(int));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_POS_GET_Result>("[BaseEntities].[SP_POS_GET](@MATID, @W_ID, @KAID, @ON_DATE, @GETEMPTY, @WH)", mATIDParameter, w_IDParameter, kAIDParameter, oN_DATEParameter, gETEMPTYParameter, wHParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_POS_IN")]
        public virtual IQueryable<SP_POS_IN_Result> SP_POS_IN(Nullable<System.DateTime> iN_ONDATE, Nullable<int> iN_MATID, Nullable<int> iN_WID, Nullable<int> iN_KAID)
        {
            var iN_ONDATEParameter = iN_ONDATE.HasValue ?
                new ObjectParameter("IN_ONDATE", iN_ONDATE) :
                new ObjectParameter("IN_ONDATE", typeof(System.DateTime));
    
            var iN_MATIDParameter = iN_MATID.HasValue ?
                new ObjectParameter("IN_MATID", iN_MATID) :
                new ObjectParameter("IN_MATID", typeof(int));
    
            var iN_WIDParameter = iN_WID.HasValue ?
                new ObjectParameter("IN_WID", iN_WID) :
                new ObjectParameter("IN_WID", typeof(int));
    
            var iN_KAIDParameter = iN_KAID.HasValue ?
                new ObjectParameter("IN_KAID", iN_KAID) :
                new ObjectParameter("IN_KAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_POS_IN_Result>("[BaseEntities].[SP_POS_IN](@IN_ONDATE, @IN_MATID, @IN_WID, @IN_KAID)", iN_ONDATEParameter, iN_MATIDParameter, iN_WIDParameter, iN_KAIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_WB_LIST_WH")]
        public virtual IQueryable<SP_WB_LIST_WH_Result> SP_WB_LIST_WH(Nullable<System.DateTime> iN_FROMDATE, Nullable<System.DateTime> iN_TODATE, Nullable<int> iN_WTYPE, Nullable<int> iN_CHECKED, string wH)
        {
            var iN_FROMDATEParameter = iN_FROMDATE.HasValue ?
                new ObjectParameter("IN_FROMDATE", iN_FROMDATE) :
                new ObjectParameter("IN_FROMDATE", typeof(System.DateTime));
    
            var iN_TODATEParameter = iN_TODATE.HasValue ?
                new ObjectParameter("IN_TODATE", iN_TODATE) :
                new ObjectParameter("IN_TODATE", typeof(System.DateTime));
    
            var iN_WTYPEParameter = iN_WTYPE.HasValue ?
                new ObjectParameter("IN_WTYPE", iN_WTYPE) :
                new ObjectParameter("IN_WTYPE", typeof(int));
    
            var iN_CHECKEDParameter = iN_CHECKED.HasValue ?
                new ObjectParameter("IN_CHECKED", iN_CHECKED) :
                new ObjectParameter("IN_CHECKED", typeof(int));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_WB_LIST_WH_Result>("[BaseEntities].[SP_WB_LIST_WH](@IN_FROMDATE, @IN_TODATE, @IN_WTYPE, @IN_CHECKED, @WH)", iN_FROMDATEParameter, iN_TODATEParameter, iN_WTYPEParameter, iN_CHECKEDParameter, wHParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_WMAT_GET")]
        public virtual IQueryable<SP_WMAT_GET_Result> SP_WMAT_GET(Nullable<int> gRPID, Nullable<int> wID, Nullable<int> kAID, Nullable<System.DateTime> oNDATE, Nullable<int> gETEMPTY, string wH, Nullable<int> sHOWALLMATS, string gRP, Nullable<int> uSERID, Nullable<int> gET_CHILD_NODE)
        {
            var gRPIDParameter = gRPID.HasValue ?
                new ObjectParameter("GRPID", gRPID) :
                new ObjectParameter("GRPID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var kAIDParameter = kAID.HasValue ?
                new ObjectParameter("KAID", kAID) :
                new ObjectParameter("KAID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var gETEMPTYParameter = gETEMPTY.HasValue ?
                new ObjectParameter("GETEMPTY", gETEMPTY) :
                new ObjectParameter("GETEMPTY", typeof(int));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            var sHOWALLMATSParameter = sHOWALLMATS.HasValue ?
                new ObjectParameter("SHOWALLMATS", sHOWALLMATS) :
                new ObjectParameter("SHOWALLMATS", typeof(int));
    
            var gRPParameter = gRP != null ?
                new ObjectParameter("GRP", gRP) :
                new ObjectParameter("GRP", typeof(string));
    
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            var gET_CHILD_NODEParameter = gET_CHILD_NODE.HasValue ?
                new ObjectParameter("GET_CHILD_NODE", gET_CHILD_NODE) :
                new ObjectParameter("GET_CHILD_NODE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_WMAT_GET_Result>("[BaseEntities].[SP_WMAT_GET](@GRPID, @WID, @KAID, @ONDATE, @GETEMPTY, @WH, @SHOWALLMATS, @GRP, @USERID, @GET_CHILD_NODE)", gRPIDParameter, wIDParameter, kAIDParameter, oNDATEParameter, gETEMPTYParameter, wHParameter, sHOWALLMATSParameter, gRPParameter, uSERIDParameter, gET_CHILD_NODEParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_WMAT_GET_BY_WH")]
        public virtual IQueryable<SP_WMAT_GET_BY_WH_Result> SP_WMAT_GET_BY_WH(Nullable<int> mATID, Nullable<int> w_ID, Nullable<int> kAID, Nullable<System.DateTime> oNDATE, string wH)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var w_IDParameter = w_ID.HasValue ?
                new ObjectParameter("W_ID", w_ID) :
                new ObjectParameter("W_ID", typeof(int));
    
            var kAIDParameter = kAID.HasValue ?
                new ObjectParameter("KAID", kAID) :
                new ObjectParameter("KAID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_WMAT_GET_BY_WH_Result>("[BaseEntities].[SP_WMAT_GET_BY_WH](@MATID, @W_ID, @KAID, @ONDATE, @WH)", mATIDParameter, w_IDParameter, kAIDParameter, oNDATEParameter, wHParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_WMAT_GET_BY_WHLIST")]
        public virtual IQueryable<SP_WMAT_GET_BY_WHLIST_Result> SP_WMAT_GET_BY_WHLIST(Nullable<int> iN_MATID, Nullable<System.DateTime> oNDATE, string wH)
        {
            var iN_MATIDParameter = iN_MATID.HasValue ?
                new ObjectParameter("IN_MATID", iN_MATID) :
                new ObjectParameter("IN_MATID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_WMAT_GET_BY_WHLIST_Result>("[BaseEntities].[SP_WMAT_GET_BY_WHLIST](@IN_MATID, @ONDATE, @WH)", iN_MATIDParameter, oNDATEParameter, wHParameter);
        }
    
        [EdmFunction("BaseEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string sep, string s)
        {
            var sepParameter = sep != null ?
                new ObjectParameter("sep", sep) :
                new ObjectParameter("sep", typeof(string));
    
            var sParameter = s != null ?
                new ObjectParameter("s", s) :
                new ObjectParameter("s", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[BaseEntities].[Split](@sep, @s)", sepParameter, sParameter);
        }
    
        public virtual ObjectResult<EXECUTESQL_EXAMPLER_Result> EXECUTESQL_EXAMPLER(Nullable<int> iN_MATID, Nullable<System.DateTime> oNDATE, string wH)
        {
            var iN_MATIDParameter = iN_MATID.HasValue ?
                new ObjectParameter("IN_MATID", iN_MATID) :
                new ObjectParameter("IN_MATID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var wHParameter = wH != null ?
                new ObjectParameter("WH", wH) :
                new ObjectParameter("WH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXECUTESQL_EXAMPLER_Result>("EXECUTESQL_EXAMPLER", iN_MATIDParameter, oNDATEParameter, wHParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_AUTO_RSV(Nullable<int> wBD_POSID)
        {
            var wBD_POSIDParameter = wBD_POSID.HasValue ?
                new ObjectParameter("WBD_POSID", wBD_POSID) :
                new ObjectParameter("WBD_POSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_AUTO_RSV", wBD_POSIDParameter);
        }
    
        public virtual int SP_AUTO_RSV_2(Nullable<int> wBD_POSID, ObjectParameter rSV)
        {
            var wBD_POSIDParameter = wBD_POSID.HasValue ?
                new ObjectParameter("WBD_POSID", wBD_POSID) :
                new ObjectParameter("WBD_POSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AUTO_RSV_2", wBD_POSIDParameter, rSV);
        }
    
        public virtual int SP_CONTR_RESULT_UPD(Nullable<int> cONTR_DOCID)
        {
            var cONTR_DOCIDParameter = cONTR_DOCID.HasValue ?
                new ObjectParameter("CONTR_DOCID", cONTR_DOCID) :
                new ObjectParameter("CONTR_DOCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CONTR_RESULT_UPD", cONTR_DOCIDParameter);
        }
    
        public virtual int SP_DEL_DOCREL(Nullable<int> pOSID, Nullable<int> sOURCEID)
        {
            var pOSIDParameter = pOSID.HasValue ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(int));
    
            var sOURCEIDParameter = sOURCEID.HasValue ?
                new ObjectParameter("SOURCEID", sOURCEID) :
                new ObjectParameter("SOURCEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DEL_DOCREL", pOSIDParameter, sOURCEIDParameter);
        }
    
        public virtual int SP_GET_RECIPE(Nullable<int> iN_WBILLID, ObjectParameter mATNAME, ObjectParameter pOSID, ObjectParameter rSV)
        {
            var iN_WBILLIDParameter = iN_WBILLID.HasValue ?
                new ObjectParameter("IN_WBILLID", iN_WBILLID) :
                new ObjectParameter("IN_WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GET_RECIPE", iN_WBILLIDParameter, mATNAME, pOSID, rSV);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_NEWDOC(Nullable<int> dOCTYPE)
        {
            var dOCTYPEParameter = dOCTYPE.HasValue ?
                new ObjectParameter("DOCTYPE", dOCTYPE) :
                new ObjectParameter("DOCTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_NEWDOC", dOCTYPEParameter);
        }
    
        public virtual int SP_ORDER_UPD_RSV(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ORDER_UPD_RSV", wBILLIDParameter);
        }
    
        public virtual int SP_RECALC_DOC_SALDO(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_DOC_SALDO", wBILLIDParameter);
        }
    
        public virtual int SP_RECALC_KA_SALDO(Nullable<int> kAID, Nullable<System.DateTime> oNDATE)
        {
            var kAIDParameter = kAID.HasValue ?
                new ObjectParameter("KAID", kAID) :
                new ObjectParameter("KAID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_KA_SALDO", kAIDParameter, oNDATEParameter);
        }
    
        public virtual int SP_RECALC_KA_SALDO_EX(Nullable<int> kAID, Nullable<System.DateTime> oNDATE)
        {
            var kAIDParameter = kAID.HasValue ?
                new ObjectParameter("KAID", kAID) :
                new ObjectParameter("KAID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_KA_SALDO_EX", kAIDParameter, oNDATEParameter);
        }
    
        public virtual int SP_RECALC_MATREMAINS(Nullable<int> mATID, Nullable<System.DateTime> oNDATE, Nullable<int> aFTERDEL)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aFTERDELParameter = aFTERDEL.HasValue ?
                new ObjectParameter("AFTERDEL", aFTERDEL) :
                new ObjectParameter("AFTERDEL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_MATREMAINS", mATIDParameter, oNDATEParameter, aFTERDELParameter);
        }
    
        public virtual int SP_RECALC_MONEY_SALDO(Nullable<System.DateTime> oNDATE, Nullable<int> aCCID, Nullable<int> cASHID, Nullable<int> cURRID, Nullable<int> sALDOTYPE)
        {
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aCCIDParameter = aCCID.HasValue ?
                new ObjectParameter("ACCID", aCCID) :
                new ObjectParameter("ACCID", typeof(int));
    
            var cASHIDParameter = cASHID.HasValue ?
                new ObjectParameter("CASHID", cASHID) :
                new ObjectParameter("CASHID", typeof(int));
    
            var cURRIDParameter = cURRID.HasValue ?
                new ObjectParameter("CURRID", cURRID) :
                new ObjectParameter("CURRID", typeof(int));
    
            var sALDOTYPEParameter = sALDOTYPE.HasValue ?
                new ObjectParameter("SALDOTYPE", sALDOTYPE) :
                new ObjectParameter("SALDOTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_MONEY_SALDO", oNDATEParameter, aCCIDParameter, cASHIDParameter, cURRIDParameter, sALDOTYPEParameter);
        }
    
        public virtual int SP_RECALC_MONEY_SALDO_EX(Nullable<System.DateTime> oNDATE, Nullable<int> aCCID, Nullable<int> cASHID, Nullable<int> cURRID, Nullable<int> sALDOTYPE)
        {
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aCCIDParameter = aCCID.HasValue ?
                new ObjectParameter("ACCID", aCCID) :
                new ObjectParameter("ACCID", typeof(int));
    
            var cASHIDParameter = cASHID.HasValue ?
                new ObjectParameter("CASHID", cASHID) :
                new ObjectParameter("CASHID", typeof(int));
    
            var cURRIDParameter = cURRID.HasValue ?
                new ObjectParameter("CURRID", cURRID) :
                new ObjectParameter("CURRID", typeof(int));
    
            var sALDOTYPEParameter = sALDOTYPE.HasValue ?
                new ObjectParameter("SALDOTYPE", sALDOTYPE) :
                new ObjectParameter("SALDOTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_MONEY_SALDO_EX", oNDATEParameter, aCCIDParameter, cASHIDParameter, cURRIDParameter, sALDOTYPEParameter);
        }
    
        public virtual int SP_RECALC_POSREMAINS(Nullable<int> pOSID, Nullable<int> mATID, Nullable<int> wID, Nullable<System.DateTime> oNDATE, Nullable<int> aFTERDEL)
        {
            var pOSIDParameter = pOSID.HasValue ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(int));
    
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aFTERDELParameter = aFTERDEL.HasValue ?
                new ObjectParameter("AFTERDEL", aFTERDEL) :
                new ObjectParameter("AFTERDEL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_POSREMAINS", pOSIDParameter, mATIDParameter, wIDParameter, oNDATEParameter, aFTERDELParameter);
        }
    
        public virtual int SP_RECALC_REMAINS(Nullable<int> pOSID, Nullable<int> mATID, Nullable<int> wID, Nullable<System.DateTime> oNDATE, Nullable<int> aFTERDEL)
        {
            var pOSIDParameter = pOSID.HasValue ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(int));
    
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aFTERDELParameter = aFTERDEL.HasValue ?
                new ObjectParameter("AFTERDEL", aFTERDEL) :
                new ObjectParameter("AFTERDEL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_REMAINS", pOSIDParameter, mATIDParameter, wIDParameter, oNDATEParameter, aFTERDELParameter);
        }
    
        public virtual int SP_RECALC_REMAINS_EX(Nullable<int> pOSID, Nullable<int> mATID, Nullable<int> wID, Nullable<System.DateTime> oNDATE, Nullable<int> aFTERDEL)
        {
            var pOSIDParameter = pOSID.HasValue ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(int));
    
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var oNDATEParameter = oNDATE.HasValue ?
                new ObjectParameter("ONDATE", oNDATE) :
                new ObjectParameter("ONDATE", typeof(System.DateTime));
    
            var aFTERDELParameter = aFTERDEL.HasValue ?
                new ObjectParameter("AFTERDEL", aFTERDEL) :
                new ObjectParameter("AFTERDEL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RECALC_REMAINS_EX", pOSIDParameter, mATIDParameter, wIDParameter, oNDATEParameter, aFTERDELParameter);
        }
    
        public virtual int SP_RENUM_WB(Nullable<int> iN_WBILLID)
        {
            var iN_WBILLIDParameter = iN_WBILLID.HasValue ?
                new ObjectParameter("IN_WBILLID", iN_WBILLID) :
                new ObjectParameter("IN_WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RENUM_WB", iN_WBILLIDParameter);
        }
    
        public virtual int SP_SET_DEBONINGDET(Nullable<int> iN_WBILLID)
        {
            var iN_WBILLIDParameter = iN_WBILLID.HasValue ?
                new ObjectParameter("IN_WBILLID", iN_WBILLID) :
                new ObjectParameter("IN_WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_DEBONINGDET", iN_WBILLIDParameter);
        }
    
        public virtual int SP_SET_DOCREL(Nullable<int> dOCID, Nullable<int> rDOCID)
        {
            var dOCIDParameter = dOCID.HasValue ?
                new ObjectParameter("DOCID", dOCID) :
                new ObjectParameter("DOCID", typeof(int));
    
            var rDOCIDParameter = rDOCID.HasValue ?
                new ObjectParameter("RDOCID", rDOCID) :
                new ObjectParameter("RDOCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_DOCREL", dOCIDParameter, rDOCIDParameter);
        }
    
        public virtual int SP_SET_EXTPOSID(Nullable<int> pOSID, Nullable<int> sOURCEID)
        {
            var pOSIDParameter = pOSID.HasValue ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(int));
    
            var sOURCEIDParameter = sOURCEID.HasValue ?
                new ObjectParameter("SOURCEID", sOURCEID) :
                new ObjectParameter("SOURCEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_EXTPOSID", pOSIDParameter, sOURCEIDParameter);
        }
    
        public virtual int SP_UPD_DATE(Nullable<int> wBILLID, Nullable<System.DateTime> nEW_ONDATE, Nullable<System.DateTime> oLD_ONDATE)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            var nEW_ONDATEParameter = nEW_ONDATE.HasValue ?
                new ObjectParameter("NEW_ONDATE", nEW_ONDATE) :
                new ObjectParameter("NEW_ONDATE", typeof(System.DateTime));
    
            var oLD_ONDATEParameter = oLD_ONDATE.HasValue ?
                new ObjectParameter("OLD_ONDATE", oLD_ONDATE) :
                new ObjectParameter("OLD_ONDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPD_DATE", wBILLIDParameter, nEW_ONDATEParameter, oLD_ONDATEParameter);
        }
    
        public virtual int SP_WMATTURN_DEL(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_WMATTURN_DEL", wBILLIDParameter);
        }
    
        public virtual int SP_WMATTURN_UPD(Nullable<int> wBILLID, Nullable<int> tURNTYPE)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            var tURNTYPEParameter = tURNTYPE.HasValue ?
                new ObjectParameter("TURNTYPE", tURNTYPE) :
                new ObjectParameter("TURNTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_WMATTURN_UPD", wBILLIDParameter, tURNTYPEParameter);
        }
    
        [EdmFunction("BaseEntities", "WBDGetOut")]
        public virtual IQueryable<WBDGetOut_Result> WBDGetOut(Nullable<int> wbill_id)
        {
            var wbill_idParameter = wbill_id.HasValue ?
                new ObjectParameter("wbill_id", wbill_id) :
                new ObjectParameter("wbill_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WBDGetOut_Result>("[BaseEntities].[WBDGetOut](@wbill_id)", wbill_idParameter);
        }
    
        [EdmFunction("BaseEntities", "WBDGetOutP2")]
        public virtual IQueryable<WBDGetOutP2_Result> WBDGetOutP2(Nullable<int> wbill_id)
        {
            var wbill_idParameter = wbill_id.HasValue ?
                new ObjectParameter("wbill_id", wbill_id) :
                new ObjectParameter("wbill_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WBDGetOutP2_Result>("[BaseEntities].[WBDGetOutP2](@wbill_id)", wbill_idParameter);
        }
    
        [EdmFunction("BaseEntities", "GetWaybillDetIn")]
        public virtual IQueryable<GetWaybillDetIn_Result> GetWaybillDetIn(Nullable<int> wbill_id)
        {
            var wbill_idParameter = wbill_id.HasValue ?
                new ObjectParameter("wbill_id", wbill_id) :
                new ObjectParameter("wbill_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWaybillDetIn_Result>("[BaseEntities].[GetWaybillDetIn](@wbill_id)", wbill_idParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_MAT_NDS")]
        public virtual IQueryable<SP_GET_MAT_NDS_Result> SP_GET_MAT_NDS(Nullable<int> mATID)
        {
            var mATIDParameter = mATID.HasValue ?
                new ObjectParameter("MATID", mATID) :
                new ObjectParameter("MATID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_MAT_NDS_Result>("[BaseEntities].[SP_GET_MAT_NDS](@MATID)", mATIDParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_MAT_REMAIN_GET_SIMPLE")]
        public virtual IQueryable<SP_MAT_REMAIN_GET_SIMPLE_Result> SP_MAT_REMAIN_GET_SIMPLE(Nullable<int> matId, Nullable<System.DateTime> onDate)
        {
            var matIdParameter = matId.HasValue ?
                new ObjectParameter("MatId", matId) :
                new ObjectParameter("MatId", typeof(int));
    
            var onDateParameter = onDate.HasValue ?
                new ObjectParameter("OnDate", onDate) :
                new ObjectParameter("OnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_MAT_REMAIN_GET_SIMPLE_Result>("[BaseEntities].[SP_MAT_REMAIN_GET_SIMPLE](@MatId, @OnDate)", matIdParameter, onDateParameter);
        }
    
        public virtual ObjectResult<string> GetCounter(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCounter", nameParameter);
        }
    
        public virtual ObjectResult<ExecuteWayBill_Result> ExecuteWayBill(Nullable<int> wBILLID, Nullable<int> nEW_WTYPE)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            var nEW_WTYPEParameter = nEW_WTYPE.HasValue ?
                new ObjectParameter("NEW_WTYPE", nEW_WTYPE) :
                new ObjectParameter("NEW_WTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExecuteWayBill_Result>("ExecuteWayBill", wBILLIDParameter, nEW_WTYPEParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> StornoWayBill(Nullable<int> wBILLID)
        {
            var wBILLIDParameter = wBILLID.HasValue ?
                new ObjectParameter("WBILLID", wBILLID) :
                new ObjectParameter("WBILLID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("StornoWayBill", wBILLIDParameter);
        }
    
        public virtual int UpdWaybillDetPrice(Nullable<int> wbill_id)
        {
            var wbill_idParameter = wbill_id.HasValue ?
                new ObjectParameter("wbill_id", wbill_id) :
                new ObjectParameter("wbill_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdWaybillDetPrice", wbill_idParameter);
        }
    
        [EdmFunction("BaseEntities", "SP_GET_ACTIVES")]
        public virtual IQueryable<SP_GET_ACTIVES_Result> SP_GET_ACTIVES(Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SP_GET_ACTIVES_Result>("[BaseEntities].[SP_GET_ACTIVES](@FROMDATE, @TODATE)", fROMDATEParameter, tODATEParameter);
        }
    
        [EdmFunction("BaseEntities", "GetRelDocList")]
        public virtual IQueryable<GetRelDocList_Result> GetRelDocList(Nullable<int> doc_id)
        {
            var doc_idParameter = doc_id.HasValue ?
                new ObjectParameter("doc_id", doc_id) :
                new ObjectParameter("doc_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetRelDocList_Result>("[BaseEntities].[GetRelDocList](@doc_id)", doc_idParameter);
        }
    
        [EdmFunction("BaseEntities", "GetWayBillList")]
        public virtual IQueryable<GetWayBillList_Result> GetWayBillList(Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, Nullable<int> w_type, Nullable<int> @checked, Nullable<int> ka_id, Nullable<int> show_null_balance, string wh, Nullable<int> ent_id)
        {
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var w_typeParameter = w_type.HasValue ?
                new ObjectParameter("w_type", w_type) :
                new ObjectParameter("w_type", typeof(int));
    
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("checked", @checked) :
                new ObjectParameter("checked", typeof(int));
    
            var ka_idParameter = ka_id.HasValue ?
                new ObjectParameter("ka_id", ka_id) :
                new ObjectParameter("ka_id", typeof(int));
    
            var show_null_balanceParameter = show_null_balance.HasValue ?
                new ObjectParameter("show_null_balance", show_null_balance) :
                new ObjectParameter("show_null_balance", typeof(int));
    
            var whParameter = wh != null ?
                new ObjectParameter("wh", wh) :
                new ObjectParameter("wh", typeof(string));
    
            var ent_idParameter = ent_id.HasValue ?
                new ObjectParameter("ent_id", ent_id) :
                new ObjectParameter("ent_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWayBillList_Result>("[BaseEntities].[GetWayBillList](@from_date, @to_date, @w_type, @checked, @ka_id, @show_null_balance, @wh, @ent_id)", from_dateParameter, to_dateParameter, w_typeParameter, checkedParameter, ka_idParameter, show_null_balanceParameter, whParameter, ent_idParameter);
        }
    
        public virtual ObjectResult<GetPayDocList_Result> GetPayDocList(Nullable<int> doc_type, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, Nullable<int> ka_id, Nullable<int> @checked, Nullable<int> pay_type)
        {
            var doc_typeParameter = doc_type.HasValue ?
                new ObjectParameter("doc_type", doc_type) :
                new ObjectParameter("doc_type", typeof(int));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var ka_idParameter = ka_id.HasValue ?
                new ObjectParameter("ka_id", ka_id) :
                new ObjectParameter("ka_id", typeof(int));
    
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("checked", @checked) :
                new ObjectParameter("checked", typeof(int));
    
            var pay_typeParameter = pay_type.HasValue ?
                new ObjectParameter("pay_type", pay_type) :
                new ObjectParameter("pay_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayDocList_Result>("GetPayDocList", doc_typeParameter, from_dateParameter, to_dateParameter, ka_idParameter, checkedParameter, pay_typeParameter);
        }
    }
}
